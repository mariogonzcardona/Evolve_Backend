# Generated by Django 5.2 on 2025-07-05 05:20

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Direccion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('estado', models.CharField(help_text='Estado o provincia', max_length=100)),
                ('ciudad', models.CharField(help_text='Ciudad o localidad', max_length=100)),
                ('calle', models.CharField(help_text='Nombre de la calle', max_length=100)),
                ('numero', models.CharField(help_text='Número exterior o interior', max_length=10)),
                ('colonia', models.CharField(help_text='Colonia o barrio', max_length=100)),
                ('codigo_postal', models.CharField(help_text='Código postal', max_length=10)),
            ],
            options={
                'verbose_name': 'Dirección',
                'verbose_name_plural': 'Direcciones',
                'db_table': 'eventos_direccion',
                'ordering': ['estado', 'ciudad', 'colonia'],
            },
        ),
        migrations.CreateModel(
            name='Patrocinador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('youtube', models.URLField(blank=True, help_text='Enlace al canal de YouTube', null=True)),
                ('facebook', models.URLField(blank=True, help_text='Enlace al perfil de Facebook', null=True)),
                ('instagram', models.URLField(blank=True, help_text='Enlace al perfil de Instagram', null=True)),
                ('twitter', models.URLField(blank=True, help_text='Enlace al perfil de Twitter', null=True)),
                ('nombre_completo', models.CharField(help_text='Nombre completo del representante', max_length=150)),
                ('puesto', models.CharField(help_text='Puesto o cargo dentro de la empresa', max_length=100)),
                ('email', models.EmailField(help_text='Correo electrónico de contacto', max_length=254)),
                ('telefono', models.CharField(help_text='Número telefónico de contacto', max_length=20)),
                ('nombre_marca', models.CharField(help_text='Nombre de la empresa o marca', max_length=150)),
                ('giro', models.CharField(help_text='Sector o giro del negocio', max_length=100)),
                ('estado', models.CharField(help_text='Estado donde opera la marca', max_length=100)),
                ('ciudad', models.CharField(help_text='Ciudad donde opera la marca', max_length=100)),
                ('sitio_web', models.URLField(blank=True, help_text='Sitio web oficial de la marca (opcional)', null=True)),
                ('tipo_patrocinio', models.CharField(choices=[('economico', 'Patrocinio económico'), ('donacion', 'Donación de productos o servicios'), ('publicidad', 'Publicidad en redes sociales'), ('stand', 'Stand de marca en el evento')], help_text='Tipo de patrocinio ofrecido', max_length=20)),
                ('ha_patrocinado_antes', models.BooleanField(default=False, help_text='¿Ha patrocinado eventos anteriormente?')),
                ('mensaje', models.TextField(blank=True, help_text='Comentarios u observaciones adicionales', null=True)),
                ('logo', models.ImageField(blank=True, help_text='Logo de la marca patrocinadora', null=True, upload_to='patrocinadores/')),
                ('confirmado', models.BooleanField(default=False, help_text='¿El patrocinio ha sido confirmado por la organización?')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Patrocinador',
                'verbose_name_plural': 'Patrocinadores',
                'db_table': 'eventos_patrocinador',
                'ordering': ['-fecha_creacion'],
            },
        ),
        migrations.CreateModel(
            name='Comprador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre del comprador', max_length=100)),
                ('apellido', models.CharField(help_text='Apellido del comprador', max_length=100)),
                ('email', models.EmailField(help_text='Correo electrónico de contacto', max_length=254, unique=True)),
                ('telefono', models.CharField(blank=True, help_text='Número telefónico (opcional)', max_length=20)),
                ('es_asistente', models.BooleanField(default=True, help_text='¿El comprador también asistirá al evento?')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
                ('direccion', models.ForeignKey(help_text='Dirección actual del comprador', on_delete=django.db.models.deletion.PROTECT, related_name='compradores', to='eventos.direccion')),
            ],
            options={
                'verbose_name': 'Comprador',
                'verbose_name_plural': 'Compradores',
                'db_table': 'eventos_comprador',
                'ordering': ['apellido', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='Evento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre del evento', max_length=255)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción general del evento', null=True)),
                ('tipo_evento', models.CharField(choices=[('torneo', 'Torneo'), ('seminario', 'Seminario'), ('otro', 'Otro')], default='torneo', help_text='Tipo de evento', max_length=20)),
                ('video_promocional_url', models.URLField(blank=True, help_text='Enlace a video promocional', null=True)),
                ('fecha_evento', models.DateField(help_text='Fecha principal del evento')),
                ('hora_inicio', models.TimeField(help_text='Hora de inicio del evento')),
                ('hora_fin', models.TimeField(blank=True, help_text='Hora de finalización del evento (opcional)', null=True)),
                ('fecha_pesaje', models.DateField(blank=True, help_text='Fecha del pesaje (opcional)', null=True)),
                ('hora_pesaje', models.TimeField(blank=True, help_text='Hora del pesaje (opcional)', null=True)),
                ('esta_activo', models.BooleanField(default=True, help_text='Define si el evento está publicado')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
                ('direccion', models.ForeignKey(help_text='Ubicación donde se llevará a cabo el evento', on_delete=django.db.models.deletion.CASCADE, related_name='eventos', to='eventos.direccion')),
            ],
            options={
                'verbose_name': 'Evento',
                'verbose_name_plural': 'Eventos',
                'db_table': 'eventos_evento',
                'ordering': ['-fecha_evento'],
            },
        ),
        migrations.CreateModel(
            name='Peleador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('youtube', models.URLField(blank=True, help_text='Enlace al canal de YouTube', null=True)),
                ('facebook', models.URLField(blank=True, help_text='Enlace al perfil de Facebook', null=True)),
                ('instagram', models.URLField(blank=True, help_text='Enlace al perfil de Instagram', null=True)),
                ('twitter', models.URLField(blank=True, help_text='Enlace al perfil de Twitter', null=True)),
                ('nombre', models.CharField(help_text='Nombre del peleador', max_length=50)),
                ('apellido', models.CharField(help_text='Apellido del peleador', max_length=50)),
                ('email', models.EmailField(help_text='Correo electrónico de contacto', max_length=254, unique=True)),
                ('telefono', models.CharField(help_text='Número telefónico de contacto', max_length=20)),
                ('nacionalidad', models.CharField(help_text='País de nacionalidad', max_length=50)),
                ('fecha_nacimiento', models.DateField(help_text='Fecha de nacimiento')),
                ('genero', models.CharField(choices=[('M', 'Hombre'), ('F', 'Mujer')], help_text='Género del peleador', max_length=1)),
                ('peso_kg', models.DecimalField(decimal_places=2, help_text='Peso en kilogramos', max_digits=5)),
                ('preferencia_combate', models.CharField(choices=[('gi', 'Gi'), ('no_gi', 'No Gi'), ('gi_y_no_gi', 'Gi y No Gi')], help_text='Tipo de combate preferido', max_length=20)),
                ('cinta', models.CharField(help_text='Grado de cinta actual', max_length=50)),
                ('equipo', models.CharField(help_text='Academia o equipo al que pertenece', max_length=100)),
                ('foto', models.ImageField(blank=True, help_text='Foto de perfil del peleador', null=True, upload_to='peleadores/')),
                ('categoria', models.CharField(help_text='Categoría competitiva (ej. Lightweight, Heavyweight)', max_length=50)),
                ('racha', models.CharField(blank=True, help_text='Historial de combates (ej. 3W-1L)', max_length=100, null=True)),
                ('firma_contrato', models.BooleanField(default=False, help_text='¿Tiene contrato firmado con la organización?')),
                ('es_estelar', models.BooleanField(default=False, help_text='¿Es un peleador estelar?')),
                ('confirmado', models.BooleanField(default=False, help_text='¿Ha sido aceptado oficialmente por la organización?')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
                ('direccion', models.OneToOneField(help_text='Dirección actual del peleador', on_delete=django.db.models.deletion.CASCADE, to='eventos.direccion')),
                ('evento', models.ForeignKey(help_text='Evento al que está inscrito el peleador', on_delete=django.db.models.deletion.CASCADE, related_name='peleadores', to='eventos.evento')),
            ],
            options={
                'verbose_name': 'Peleador',
                'verbose_name_plural': 'Peleadores',
                'db_table': 'eventos_peleador',
                'ordering': ['apellido', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='TipoBoleto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nombre', models.CharField(help_text='Nombre identificador del tipo de boleto', max_length=100)),
                ('descripcion', models.TextField(blank=True, help_text='Descripción general del boleto')),
                ('precio', models.DecimalField(decimal_places=2, help_text='Precio en pesos mexicanos', max_digits=8)),
                ('incluye', models.TextField(blank=True, help_text='Lista de beneficios o accesos incluidos')),
                ('cupo', models.IntegerField(blank=True, help_text='Cantidad máxima disponible (opcional)', null=True)),
                ('orden', models.IntegerField(default=0, help_text='Orden de aparición en el frontend')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
                ('evento', models.ForeignKey(help_text='Evento al que pertenece este tipo de boleto', on_delete=django.db.models.deletion.CASCADE, related_name='tipos_boleto', to='eventos.evento')),
            ],
            options={
                'verbose_name': 'Tipo de boleto',
                'verbose_name_plural': 'Tipos de boletos',
                'db_table': 'eventos_tipo_boleto',
                'ordering': ['orden', 'nombre'],
            },
        ),
        migrations.CreateModel(
            name='CompraBoleto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cantidad', models.PositiveIntegerField(default=1, help_text='Número de boletos comprados')),
                ('fecha_compra', models.DateTimeField(auto_now_add=True)),
                ('status_pago', models.CharField(choices=[('pendiente', 'Pendiente'), ('pagado', 'Pagado'), ('cancelado', 'Cancelado')], default='pendiente', help_text='Estado del pago', max_length=20)),
                ('total_pagado', models.DecimalField(decimal_places=2, help_text='Monto total pagado', max_digits=10)),
                ('referencia_pago', models.CharField(blank=True, help_text='ID de transacción en Conekta (opcional)', max_length=100, null=True)),
                ('terminos_aceptados', models.BooleanField(default=False, help_text='¿Se aceptaron los términos y condiciones?')),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('fecha_actualizacion', models.DateTimeField(auto_now=True)),
                ('comprador', models.ForeignKey(help_text='Comprador que realiza la transacción', on_delete=django.db.models.deletion.CASCADE, related_name='compras', to='eventos.comprador')),
                ('evento', models.ForeignKey(help_text='Evento al que corresponde la compra', on_delete=django.db.models.deletion.CASCADE, related_name='compras', to='eventos.evento')),
                ('peleador', models.ForeignKey(blank=True, help_text='Peleador asociado (opcional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='compras', to='eventos.peleador')),
                ('tipo_boleto', models.ForeignKey(help_text='Tipo de boleto adquirido', on_delete=django.db.models.deletion.CASCADE, related_name='compras', to='eventos.tipoboleto')),
            ],
            options={
                'verbose_name': 'Compra de boleto',
                'verbose_name_plural': 'Compras de boletos',
                'db_table': 'eventos_compra_boleto',
                'ordering': ['-fecha_compra'],
            },
        ),
        migrations.CreateModel(
            name='TransaccionConekta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_conekta', models.CharField(help_text='ID de la transacción en Conekta', max_length=100, unique=True)),
                ('estatus', models.CharField(help_text='Estatus actual del cargo (ej. paid, failed, refunded)', max_length=50)),
                ('metodo_pago', models.CharField(help_text='Método de pago usado (ej. card, cash, spei)', max_length=50)),
                ('monto', models.DecimalField(decimal_places=2, help_text='Monto procesado en la transacción', max_digits=10)),
                ('moneda', models.CharField(default='MXN', help_text='Moneda de la transacción', max_length=10)),
                ('autorizado_en', models.DateTimeField(blank=True, help_text='Fecha y hora en que fue autorizado el pago', null=True)),
                ('pagado_en', models.DateTimeField(blank=True, help_text='Fecha y hora en que fue pagado (si aplica)', null=True)),
                ('fallido_en', models.DateTimeField(blank=True, help_text='Fecha y hora del fallo (si aplica)', null=True)),
                ('mensaje_error', models.TextField(blank=True, help_text='Mensaje de error devuelto por Conekta (si aplica)', null=True)),
                ('raw_data', models.JSONField(blank=True, help_text='Payload completo recibido de Conekta', null=True)),
                ('fecha_creacion', models.DateTimeField(auto_now_add=True)),
                ('compra', models.OneToOneField(help_text='Compra asociada a esta transacción', on_delete=django.db.models.deletion.CASCADE, related_name='transaccion_conekta', to='eventos.compraboleto')),
            ],
            options={
                'verbose_name': 'Transacción con Conekta',
                'verbose_name_plural': 'Transacciones con Conekta',
                'db_table': 'pagos_transacciones_conekta',
                'ordering': ['-fecha_creacion'],
            },
        ),
    ]
